{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { makeSource, defineDocumentType } from 'contentlayer/source-files';\nimport rehypePrettyCode from 'rehype-pretty-code';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\nimport { visit } from 'unist-util-visit';\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n    slug: {\n        type: 'string',\n        resolve: doc => `/${doc._raw.flattenedPath}`,\n    },\n    slugAsParams: {\n        type: 'string',\n        resolve: doc => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    },\n    readingTime: {\n        type: 'number',\n        resolve: doc => {\n            const content = doc.body.raw;\n            const wordsPerMinute = 200;\n            const numberOfWords = content.split(/\\s/g).length;\n            const minutes = numberOfWords / wordsPerMinute;\n            return Math.ceil(minutes);\n        },\n    },\n};\n\nexport const Author = defineDocumentType(() => ({\n    name: 'Author',\n    filePathPattern: `authors/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        description: {\n            type: 'string',\n        },\n        avatar: {\n            type: 'string',\n            required: true,\n        },\n        linkin: {\n            type: 'string',\n            required: true,\n        },\n    },\n    computedFields,\n}));\n\nexport const Page = defineDocumentType(() => ({\n    name: 'Page',\n    filePathPattern: `pages/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        description: {\n            type: 'string',\n        },\n    },\n    computedFields,\n}));\n\nexport const Post = defineDocumentType(() => ({\n    name: 'Post',\n    filePathPattern: `blog/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        description: {\n            type: 'string',\n        },\n        image: {\n            type: 'string',\n            required: true,\n        },\n        date: {\n            type: 'date',\n            required: true,\n        },\n        author: {\n            type: 'string',\n            required: true,\n        },\n        category: {\n            type: 'enum',\n            options: [''],\n            required: false,\n        },\n    },\n    computedFields,\n}));\n\nexport default makeSource({\n    contentDirPath: './src/content',\n    disableImportAliasWarning: true,\n    documentTypes: [Page, Post, Author],\n    mdx: {\n        remarkPlugins: [remarkGfm],\n        rehypePlugins: [\n            rehypeSlug,\n            () => tree => {\n                visit(tree, node => {\n                    if (node?.type === 'element' && node?.tagName === 'pre') {\n                        const [codeEl] = node.children;\n                        if (codeEl.tagName !== 'code') return;\n\n                        node.raw = codeEl.children?.[0].value;\n                    }\n                });\n            },\n            [\n                rehypePrettyCode,\n                {\n                    theme: { dark: 'one-dark-pro', light: 'github-light' },\n\n                    /**\n                     * @param {{ children: string | any[]; }} node\n                     */\n                    onVisitLine(node) {\n                        // Prevent lines from collapsing in `display: grid` mode, and allow empty\n                        // lines to be copy/pasted\n                        if (node.children.length === 0) {\n                            node.children = [{ type: 'text', value: ' ' }];\n                        }\n                    },\n                    /**\n                     * @param {{ properties: { className: string[]; }; }} node\n                     */\n                    onVisitHighlightedLine(node) {\n                        node.properties.className.push('line--highlighted');\n                    },\n                    /**\n                     * @param {{ properties: { className: string[]; }; }} node\n                     */\n                    onVisitHighlightedWord(node) {\n                        node.properties.className = ['word--highlighted'];\n                    },\n                },\n            ],\n            () => tree => {\n                visit(tree, node => {\n                    if (node?.type === 'element' && node?.tagName === 'div') {\n                        if (\n                            !(\n                                'data-rehype-pretty-code-fragment' in\n                                node.properties\n                            )\n                        )\n                            return;\n\n                        for (const child of node.children) {\n                            if (child.tagName === 'pre') {\n                                child.properties['raw'] = node.raw;\n                            }\n                        }\n                    }\n                });\n            },\n        ],\n    },\n});\n"],
  "mappings": "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",
  "names": []
}
